-- RLS √âS PERMISSION PROBL√âMA JAV√çT√ÅSA
-- Ez a script jav√≠tja a 403 Forbidden hib√°t a profiles t√°bla friss√≠t√©s√©n√©l

-- ==========================================
-- 1. JELENLEGI RLS POLICY-K ELLEN≈êRZ√âSE
-- ==========================================

-- Megl√©v≈ë policy-k list√°z√°sa
SELECT 
    policyname,
    cmd as operation,
    permissive,
    roles,
    qual as condition,
    with_check as check_condition
FROM pg_policies 
WHERE schemaname = 'public' AND tablename = 'profiles';

-- ==========================================
-- 2. T√ÅBLA JOGOSULTS√ÅGOK ELLEN≈êRZ√âSE
-- ==========================================

-- T√°bla owner ellen≈ërz√©se
SELECT 
    tableowner,
    tablename,
    schemaname
FROM pg_tables 
WHERE schemaname = 'public' AND tablename = 'profiles';

-- T√°bla jogosults√°gok ellen≈ërz√©se (information_schema haszn√°lat√°val)
SELECT 
    grantee,
    privilege_type,
    is_grantable,
    grantor
FROM information_schema.table_privileges
WHERE table_schema = 'public' 
  AND table_name = 'profiles'
ORDER BY grantee, privilege_type;

-- RLS √°llapot ellen≈ërz√©se
SELECT 
    schemaname,
    tablename,
    rowsecurity as rls_enabled
FROM pg_tables 
WHERE schemaname = 'public' AND tablename = 'profiles';

-- ==========================================
-- 3. FOREIGN KEY KAPCSOLATOK ELLEN≈êRZ√âSE
-- ==========================================

-- Ellen≈ërizz√ºk, hogy van-e foreign key kapcsolat users t√°bl√°ra
SELECT 
    tc.constraint_name,
    tc.table_name,
    kcu.column_name,
    ccu.table_name AS foreign_table_name,
    ccu.column_name AS foreign_column_name
FROM information_schema.table_constraints AS tc
JOIN information_schema.key_column_usage AS kcu
    ON tc.constraint_name = kcu.constraint_name
    AND tc.table_schema = kcu.table_schema
JOIN information_schema.constraint_column_usage AS ccu
    ON ccu.constraint_name = tc.constraint_name
    AND ccu.table_schema = tc.table_schema
WHERE tc.constraint_type = 'FOREIGN KEY'
    AND tc.table_schema = 'public'
    AND tc.table_name = 'profiles';

-- ==========================================
-- 4. RLS POLICY-K √öJRAL√âTREHOZ√ÅSA
-- ==========================================

-- R√©gi policy-k t√∂rl√©se
DROP POLICY IF EXISTS "Users can view own profile" ON public.profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON public.profiles;
DROP POLICY IF EXISTS "Users can insert own profile" ON public.profiles;
DROP POLICY IF EXISTS "Users can delete own profile" ON public.profiles;

-- Biztons√°gos policy-k l√©trehoz√°sa
-- VIEW policy - felhaszn√°l√≥ l√°thatja saj√°t profilj√°t
CREATE POLICY "Enable read access for users based on user_id"
ON public.profiles FOR SELECT
USING (auth.uid() = id);

-- INSERT policy - felhaszn√°l√≥ l√©trehozhatja saj√°t profilj√°t
CREATE POLICY "Enable insert for users based on user_id"
ON public.profiles FOR INSERT
WITH CHECK (auth.uid() = id);

-- UPDATE policy - felhaszn√°l√≥ friss√≠theti saj√°t profilj√°t
CREATE POLICY "Enable update for users based on user_id"
ON public.profiles FOR UPDATE
USING (auth.uid() = id)
WITH CHECK (auth.uid() = id);

-- DELETE policy - felhaszn√°l√≥ t√∂r√∂lheti saj√°t profilj√°t (opcion√°lis)
CREATE POLICY "Enable delete for users based on user_id"
ON public.profiles FOR DELETE
USING (auth.uid() = id);

-- ==========================================
-- 5. T√ÅBLA JOGOSULTS√ÅGOK BE√ÅLL√çT√ÅSA
-- ==========================================

-- Alap√©rtelmezett jogosults√°gok megad√°sa authenticated felhaszn√°l√≥knak
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT ALL ON public.profiles TO authenticated;

-- Anon felhaszn√°l√≥knak csak olvas√°si jog (ha sz√ºks√©ges)
GRANT USAGE ON SCHEMA public TO anon;
GRANT SELECT ON public.profiles TO anon;

-- ==========================================
-- 6. FOREIGN KEY M√ìDOS√çT√ÅSA (ha sz√ºks√©ges)
-- ==========================================

-- Ellen≈ërizz√ºk √©s jav√≠tsuk a foreign key kapcsolatokat
DO $$
BEGIN
    -- Ellen≈ërizz√ºk, hogy l√©tezik-e a profiles_id_fkey constraint
    IF EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'profiles_id_fkey' 
        AND table_name = 'profiles' 
        AND table_schema = 'public'
    ) THEN
        RAISE NOTICE 'profiles_id_fkey constraint exists, checking if modification needed';
        
        -- Supabase-ben √°ltal√°ban m√°r j√≥l van be√°ll√≠tva, de ellen≈ërizz√ºk
        -- Ha probl√©m√°k vannak, akkor m√≥dos√≠thatjuk
        
    ELSE
        RAISE NOTICE 'No profiles_id_fkey constraint found - this is OK for Supabase';
    END IF;
    
    -- Ellen≈ërizz√ºk, hogy van-e auth.users t√°bla referencia probl√©ma
    -- Supabase-ben ez √°ltal√°ban automatikusan kezelve van
    RAISE NOTICE 'Foreign key check completed';
END $$;

-- ==========================================
-- 7. SECURITY DEFINER FUNCTION (ALTERNAT√çV MEGOLD√ÅS)
-- ==========================================

-- L√©trehozunk egy security definer function-t a biztons√°gos friss√≠t√©shez
CREATE OR REPLACE FUNCTION update_user_profile(
    user_id UUID,
    profile_data JSONB
)
RETURNS SETOF public.profiles
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
    -- Ellen≈ërizz√ºk, hogy a felhaszn√°l√≥ csak saj√°t profilj√°t friss√≠ti
    IF auth.uid() != user_id THEN
        RAISE EXCEPTION 'Unauthorized: Cannot update another user''s profile';
    END IF;
    
    -- Friss√≠tj√ºk a profilt
    RETURN QUERY
    UPDATE public.profiles
    SET 
        display_name = COALESCE(
            NULLIF((profile_data->>'display_name')::TEXT, ''), 
            display_name
        ),
        full_name = COALESCE(
            NULLIF((profile_data->>'full_name')::TEXT, ''), 
            NULLIF((profile_data->>'display_name')::TEXT, ''),
            display_name,
            full_name
        ),
        height = COALESCE(
            CASE 
                WHEN profile_data ? 'height' AND (profile_data->>'height') != 'null'
                THEN (profile_data->>'height')::INTEGER 
                ELSE NULL 
            END, 
            height
        ),
        weight = COALESCE(
            CASE 
                WHEN profile_data ? 'weight' AND (profile_data->>'weight') != 'null'
                THEN (profile_data->>'weight')::DECIMAL 
                ELSE NULL 
            END, 
            weight
        ),
        birthdate = COALESCE(
            CASE 
                WHEN profile_data ? 'birthdate' AND (profile_data->>'birthdate') != 'null' AND (profile_data->>'birthdate') != ''
                THEN (profile_data->>'birthdate')::DATE 
                ELSE NULL 
            END, 
            birthdate
        ),
        gender = COALESCE(
            NULLIF((profile_data->>'gender')::TEXT, ''), 
            gender
        ),
        fitness_goals = COALESCE(
            CASE 
                WHEN profile_data ? 'fitness_goals' 
                THEN (profile_data->'fitness_goals')::JSONB 
                ELSE NULL 
            END, 
            fitness_goals
        ),
        experience_level = COALESCE(
            NULLIF((profile_data->>'experience_level')::TEXT, ''), 
            experience_level
        ),
        updated_at = NOW()
    WHERE id = user_id
    RETURNING *;
END $$;

-- Function komment
COMMENT ON FUNCTION update_user_profile(UUID, JSONB) IS 'Biztons√°gosan friss√≠ti a felhaszn√°l√≥ profilj√°t RLS megker√ºl√©s√©vel';

-- ==========================================
-- 8. TESZT LEK√âRDEZ√âSEK
-- ==========================================

-- Tesztelj√ºk a policy-kat egy megl√©v≈ë felhaszn√°l√≥val
-- (Ezt csak akkor futtasd, ha van akt√≠v felhaszn√°l√≥)
/*
-- SELECT teszt
SELECT * FROM public.profiles WHERE id = auth.uid();

-- UPDATE teszt
UPDATE public.profiles 
SET updated_at = NOW() 
WHERE id = auth.uid();
*/

-- ==========================================
-- 9. ELLEN≈êRZ≈ê LEK√âRDEZ√âSEK
-- ==========================================

-- √öj policy-k ellen≈ërz√©se
SELECT 
    policyname,
    cmd as operation,
    CASE 
        WHEN cmd = 'SELECT' THEN 'üëÅÔ∏è Olvas√°s'
        WHEN cmd = 'INSERT' THEN '‚ûï Besz√∫r√°s'
        WHEN cmd = 'UPDATE' THEN '‚úèÔ∏è Friss√≠t√©s'
        WHEN cmd = 'DELETE' THEN 'üóëÔ∏è T√∂rl√©s'
        ELSE '‚ùì Egy√©b'
    END as operation_type,
    qual as condition
FROM pg_policies 
WHERE schemaname = 'public' AND tablename = 'profiles'
ORDER BY cmd;

-- Jogosults√°gok ellen≈ërz√©se
SELECT 
    grantee,
    privilege_type,
    is_grantable
FROM information_schema.role_table_grants
WHERE table_schema = 'public' 
  AND table_name = 'profiles'
  AND grantee IN ('authenticated', 'anon')
ORDER BY grantee, privilege_type;

-- SUCCESS √ºzenet
DO $$
BEGIN
    RAISE NOTICE '‚úÖ RLS policy-k √©s jogosults√°gok sikeresen friss√≠tve!';
    RAISE NOTICE 'üîß Ha tov√°bbra is 403 hib√°t kapsz, haszn√°ld az update_user_profile() function-t';
    RAISE NOTICE 'üìù Tesztel√©s: pr√≥b√°ld ki √∫jra a Profile oldal ment√©s√©t';
END $$;

-- üîß ADMIN USER CREATION FIX - SUPABASE SQL EDITOR-BEN FUTTATHAT√ì
-- M√°solj be ezt a k√≥dot a Supabase Dashboard > SQL Editor-be

-- ==========================================
-- ADMIN FELHASZN√ÅL√ì L√âTREHOZ√ÅSI FUNKCI√ì
-- ==========================================

-- Funkci√≥ admin felhaszn√°l√≥k l√©trehoz√°s√°hoz profiles t√°bl√°ban
CREATE OR REPLACE FUNCTION create_admin_user(
    user_email TEXT,
    user_full_name TEXT,
    user_role user_role DEFAULT 'user'
)
RETURNS UUID
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    new_user_id UUID;
    existing_user_id UUID;
BEGIN
    -- Ellen≈ërizz√ºk, hogy a jelenlegi felhaszn√°l√≥ admin-e
    IF NOT EXISTS (
        SELECT 1 FROM public.profiles 
        WHERE id = auth.uid() AND role = 'admin'
    ) THEN
        RAISE EXCEPTION 'Unauthorized: Only admins can create users';
    END IF;
    
    -- Ellen≈ërizz√ºk, hogy m√°r l√©tezik-e felhaszn√°l√≥ ezzel az email c√≠mmel
    SELECT id INTO existing_user_id
    FROM public.profiles
    WHERE email = user_email;
    
    IF existing_user_id IS NOT NULL THEN
        RAISE EXCEPTION 'User with email % already exists', user_email;
    END IF;
    
    -- Gener√°lunk egy √∫j UUID-t
    new_user_id := gen_random_uuid();
    
    -- L√©trehozzuk a felhaszn√°l√≥t a profiles t√°bl√°ban
    INSERT INTO public.profiles (
        id,
        email,
        full_name,
        display_name,
        role,
        created_at,
        updated_at
    ) VALUES (
        new_user_id,
        user_email,
        user_full_name,
        user_full_name, -- display_name ugyanaz mint full_name
        user_role,
        NOW(),
        NOW()
    );
    
    -- Visszaadjuk az √∫j felhaszn√°l√≥ ID-j√©t
    RETURN new_user_id;
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Error creating user: %', SQLERRM;
END $$;

-- Function komment
COMMENT ON FUNCTION create_admin_user(TEXT, TEXT, user_role) IS 'Admin function to create users in profiles table';

-- ==========================================
-- FELHASZN√ÅL√ì T√ñRL√âSI FUNKCI√ì (SOFT DELETE)
-- ==========================================

CREATE OR REPLACE FUNCTION delete_admin_user(
    target_user_id UUID
)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
    -- Ellen≈ërizz√ºk, hogy a jelenlegi felhaszn√°l√≥ admin-e
    IF NOT EXISTS (
        SELECT 1 FROM public.profiles 
        WHERE id = auth.uid() AND role = 'admin'
    ) THEN
        RAISE EXCEPTION 'Unauthorized: Only admins can delete users';
    END IF;
    
    -- Ellen≈ërizz√ºk, hogy a c√©lzott felhaszn√°l√≥ l√©tezik-e
    IF NOT EXISTS (
        SELECT 1 FROM public.profiles 
        WHERE id = target_user_id
    ) THEN
        RAISE EXCEPTION 'User with ID % does not exist', target_user_id;
    END IF;
    
    -- Ellen≈ërizz√ºk, hogy nem pr√≥b√°lja mag√°t t√∂r√∂lni
    IF target_user_id = auth.uid() THEN
        RAISE EXCEPTION 'Cannot delete your own account';
    END IF;
    
    -- Soft delete: role be√°ll√≠t√°sa 'disabled'-re
    UPDATE public.profiles
    SET 
        role = 'disabled',
        updated_at = NOW()
    WHERE id = target_user_id;
    
    RETURN TRUE;
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Error deleting user: %', SQLERRM;
END $$;

-- Function komment
COMMENT ON FUNCTION delete_admin_user(UUID) IS 'Admin function to soft delete users (set role to disabled)';

-- ==========================================
-- FELHASZN√ÅL√ì VISSZA√ÅLL√çT√ÅSI FUNKCI√ì
-- ==========================================

CREATE OR REPLACE FUNCTION restore_admin_user(
    target_user_id UUID,
    new_role user_role DEFAULT 'user'
)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
    -- Ellen≈ërizz√ºk, hogy a jelenlegi felhaszn√°l√≥ admin-e
    IF NOT EXISTS (
        SELECT 1 FROM public.profiles 
        WHERE id = auth.uid() AND role = 'admin'
    ) THEN
        RAISE EXCEPTION 'Unauthorized: Only admins can restore users';
    END IF;
    
    -- Ellen≈ërizz√ºk, hogy a c√©lzott felhaszn√°l√≥ l√©tezik-e √©s disabled-e
    IF NOT EXISTS (
        SELECT 1 FROM public.profiles 
        WHERE id = target_user_id AND role = 'disabled'
    ) THEN
        RAISE EXCEPTION 'User with ID % does not exist or is not disabled', target_user_id;
    END IF;
    
    -- Vissza√°ll√≠tjuk a felhaszn√°l√≥t
    UPDATE public.profiles
    SET 
        role = new_role,
        updated_at = NOW()
    WHERE id = target_user_id;
    
    RETURN TRUE;
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Error restoring user: %', SQLERRM;
END $$;

-- Function komment
COMMENT ON FUNCTION restore_admin_user(UUID, user_role) IS 'Admin function to restore disabled users';

-- ==========================================
-- ELLEN≈êRZ≈ê LEK√âRDEZ√âSEK
-- ==========================================

-- Ellen≈ërizz√ºk, hogy a function√∂k l√©trej√∂ttek
SELECT 
    p.proname as function_name,
    pg_get_function_arguments(p.oid) as arguments,
    'Function successfully created' as status
FROM pg_proc p
JOIN pg_namespace n ON p.pronamespace = n.oid
WHERE n.nspname = 'public' 
  AND p.proname IN ('create_admin_user', 'delete_admin_user', 'restore_admin_user')
ORDER BY p.proname;

-- ==========================================
-- TESZT LEK√âRDEZ√âS (KOMMENTELD KI HA HASZN√ÅLNI AKAROD)
-- ==========================================

/*
-- P√©lda haszn√°lat (csak admin felhaszn√°l√≥k√©nt futtathat√≥):

-- √öj felhaszn√°l√≥ l√©trehoz√°sa
SELECT create_admin_user(
    'uj.felhasznalo@example.com',
    '√öj Felhaszn√°l√≥',
    'user'
);

-- Felhaszn√°l√≥ soft delete
SELECT delete_admin_user('USER_ID_ITT');

-- Felhaszn√°l√≥ vissza√°ll√≠t√°sa
SELECT restore_admin_user('USER_ID_ITT', 'user');
*/

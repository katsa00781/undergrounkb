import { supabase } from '../config/supabase';
import { sendInviteEmail, checkEmailJSConfig } from './emailService';
import toast from 'react-hot-toast';

export interface PendingInvite {
  id: string;
  email: string;
  role: 'admin' | 'user' | 'disabled';
  invited_by: string | null;
  invite_token: string;
  expires_at: string;
  used_at: string | null;
  created_at: string;
  updated_at: string;
}

export interface InviteData {
  email: string;
  role: 'admin' | 'user';
}

/**
 * Megh√≠v√≥ l√©trehoz√°sa (admin funkci√≥)
 */
export async function createInvite(inviteData: InviteData): Promise<PendingInvite> {
  console.log('üöÄ Creating invite:', inviteData);
  
  try {
    // El≈ësz√∂r ellen≈ërizz√ºk a Supabase kapcsolatot
    const { data: authData, error: authError } = await supabase.auth.getUser();
    if (authError || !authData.user) {
      console.error('‚ùå Auth check failed:', authError);
      throw new Error('Nincs bejelentkezve vagy lej√°rt a session');
    }
    
    console.log('‚úÖ Auth check passed, user:', authData.user.email);
    
    // Megh√≠v√≥ l√©trehoz√°sa
    console.log('üì§ Calling create_user_invite RPC...');
    const { data, error } = await supabase
      .rpc('create_user_invite', {
        invite_email: inviteData.email,
        invite_role: inviteData.role
      });

    console.log('üì• RPC Response:', { data, error });

    if (error) {
      console.error('‚ùå RPC Error:', error);
      
      // Specifikus hibakezel√©s
      if (error.message.includes('function') && error.message.includes('not found')) {
        throw new Error('A megh√≠v√≥ funkci√≥ nincs telep√≠tve a database-ben. Futtasd le a create-invite-system.sql scriptet!');
      } else if (error.message.includes('permission denied')) {
        throw new Error('Nincs jogosults√°god megh√≠v√≥ k√ºld√©s√©re. Csak adminok k√ºldhetnek megh√≠v√≥t.');
      } else if (error.message.includes('already exists')) {
        throw new Error('Ezzel az email c√≠mmel m√°r l√©tezik felhaszn√°l√≥ vagy akt√≠v megh√≠v√≥.');
      }
      
      throw error;
    }

    if (!data || data.length === 0) {
      console.error('‚ùå No data returned from RPC');
      throw new Error('A server nem adott vissza megh√≠v√≥ adatokat');
    }

    const invite = data[0] as PendingInvite;
    console.log('‚úÖ Invite created successfully:', invite);
    
    // Megh√≠v√≥ URL gener√°l√°sa
    const inviteUrl = `${window.location.origin}/invite/${invite.invite_token}`;
    
    // Email k√ºld√©s megk√≠s√©rl√©se
    console.log('üìß Attempting to send invite email...');
    
    // EmailJS konfigur√°ci√≥ ellen≈ërz√©se
    const emailConfig = checkEmailJSConfig();
    console.log('üìã Email configuration:', emailConfig);
    
    try {
      const emailSent = await sendInviteEmail(invite.email, invite.invite_token);
      
      if (emailSent) {
        if (emailConfig.configured) {
          toast.success(`‚úÖ Megh√≠v√≥ l√©trehozva √©s email elk√ºldve: ${invite.email}`);
          console.log('‚úÖ Real email sent successfully to:', invite.email);
        } else {
          toast.success(`‚úÖ Megh√≠v√≥ l√©trehozva! (Email mock mode) Link: ${inviteUrl}`);
          console.log('üé≠ Mock email sent to:', invite.email);
        }
      } else {
        toast.success(`‚ö†Ô∏è Megh√≠v√≥ l√©trehozva, de email k√ºld√©s sikertelen. Link: ${inviteUrl}`);
        console.warn('‚ö†Ô∏è Email sending failed, but invite created');
      }
    } catch (emailError) {
      console.error('‚ùå Email service error:', emailError);
      toast.success(`‚ö†Ô∏è Megh√≠v√≥ l√©trehozva, email hiba miatt manual k√ºld√©s sz√ºks√©ges. Link: ${inviteUrl}`);
    }
    
    console.log('üîó Invite URL:', inviteUrl);
    
    return invite;
  } catch (error) {
    console.error('Error in createInvite:', error);
    
    if (error instanceof Error) {
      if (error.message.includes('already exists')) {
        toast.error('Ezzel az email c√≠mmel m√°r l√©tezik felhaszn√°l√≥');
      } else if (error.message.includes('Active invite already exists')) {
        toast.error('M√°r van akt√≠v megh√≠v√≥ ehhez az email c√≠mhez');
      } else if (error.message.includes('Unauthorized')) {
        toast.error('Csak adminok hozhatnak l√©tre megh√≠v√≥kat');
      } else {
        toast.error(`Hiba a megh√≠v√≥ l√©trehoz√°sa sor√°n: ${error.message}`);
      }
    } else {
      toast.error('Ismeretlen hiba t√∂rt√©nt a megh√≠v√≥ l√©trehoz√°sa sor√°n');
    }
    
    throw error;
  }
}

/**
 * Akt√≠v megh√≠v√≥k lek√©r√©se (admin funkci√≥)
 */
export async function getPendingInvites(): Promise<PendingInvite[]> {
  try {
    const { data, error } = await supabase
      .from('pending_invites')
      .select(`
        *,
        invited_by_profile:invited_by(email, full_name)
      `)
      .is('used_at', null)
      .gt('expires_at', new Date().toISOString())
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Error fetching pending invites:', error);
      throw error;
    }

    return data as PendingInvite[];
  } catch (error) {
    console.error('Error in getPendingInvites:', error);
    toast.error('Hiba a megh√≠v√≥k bet√∂lt√©se sor√°n');
    throw error;
  }
}

/**
 * Megh√≠v√≥ token valid√°l√°sa (publikus funkci√≥)
 */
export async function validateInvite(token: string): Promise<PendingInvite | null> {
  try {
    const { data, error } = await supabase
      .rpc('validate_invite_token', {
        token: token
      });

    if (error) {
      console.error('Error validating invite:', error);
      return null;
    }

    if (!data || data.length === 0) {
      return null;
    }

    return data[0] as PendingInvite;
  } catch (error) {
    console.error('Error in validateInvite:', error);
    return null;
  }
}

/**
 * Regisztr√°ci√≥ megh√≠v√≥ alapj√°n
 */
export async function acceptInvite(
  token: string, 
  password: string, 
  displayName?: string
): Promise<void> {
  try {
    // 1. Megh√≠v√≥ valid√°l√°sa
    const invite = await validateInvite(token);
    if (!invite) {
      throw new Error('√ârv√©nytelen vagy lej√°rt megh√≠v√≥');
    }

    // 2. Felhaszn√°l√≥ regisztr√°ci√≥ Supabase Auth-ban
    const { data: authData, error: signUpError } = await supabase.auth.signUp({
      email: invite.email,
      password: password,
      options: {
        data: {
          display_name: displayName || invite.email.split('@')[0],
          role: invite.role,
          invite_token: token
        }
      }
    });

    if (signUpError) {
      console.error('Auth signup error:', signUpError);
      throw signUpError;
    }

    if (!authData.user) {
      throw new Error('Felhaszn√°l√≥ l√©trehoz√°sa sikertelen');
    }

    // 3. Megh√≠v√≥ token felhaszn√°l√°sa √©s profil l√©trehoz√°sa
    const { error: useInviteError } = await supabase
      .rpc('use_invite_token', {
        token: token,
        new_user_id: authData.user.id
      });

    if (useInviteError) {
      console.error('Error using invite token:', useInviteError);
      // Ne blokkoljuk a folyamatot, ha a token haszn√°lata nem siker√ºl
      console.warn('Invite token usage failed, but user was created');
    }

    toast.success('Sikeres regisztr√°ci√≥! Jelentkezz be az √∫j fi√≥kkal.');
    
  } catch (error) {
    console.error('Error in acceptInvite:', error);
    
    if (error instanceof Error) {
      if (error.message.includes('User already registered')) {
        toast.error('Ezzel az email c√≠mmel m√°r regisztr√°ltak');
      } else if (error.message.includes('Password')) {
        toast.error('A jelsz√≥ t√∫l gyenge. Minimum 6 karakter sz√ºks√©ges.');
      } else {
        toast.error(`Hiba a regisztr√°ci√≥ sor√°n: ${error.message}`);
      }
    } else {
      toast.error('Ismeretlen hiba t√∂rt√©nt a regisztr√°ci√≥ sor√°n');
    }
    
    throw error;
  }
}

/**
 * Megh√≠v√≥ t√∂rl√©se (admin funkci√≥)
 */
export async function cancelInvite(inviteId: string): Promise<void> {
  try {
    const { error } = await supabase
      .from('pending_invites')
      .delete()
      .eq('id', inviteId);

    if (error) {
      console.error('Error canceling invite:', error);
      throw error;
    }

    toast.success('Megh√≠v√≥ t√∂r√∂lve');
  } catch (error) {
    console.error('Error in cancelInvite:', error);
    toast.error('Hiba a megh√≠v√≥ t√∂rl√©se sor√°n');
    throw error;
  }
}

/**
 * Lej√°rt megh√≠v√≥k tiszt√≠t√°sa (admin funkci√≥)
 */
export async function cleanupExpiredInvites(): Promise<number> {
  try {
    const { data, error } = await supabase
      .rpc('cleanup_expired_invites');

    if (error) {
      console.error('Error cleaning up invites:', error);
      throw error;
    }

    const deletedCount = data as number;
    toast.success(`${deletedCount} lej√°rt megh√≠v√≥ t√∂r√∂lve`);
    
    return deletedCount;
  } catch (error) {
    console.error('Error in cleanupExpiredInvites:', error);
    toast.error('Hiba a megh√≠v√≥k tiszt√≠t√°sa sor√°n');
    throw error;
  }
}

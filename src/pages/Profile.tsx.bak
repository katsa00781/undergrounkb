import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { User, Mail, Calendar, Scale, Ruler, Target, X } from 'lucide-react';
import { useProfileProvider } from '../hooks/useProfileProvider';

const profileSchema = z.object({
  displayName: z.string().min(2, 'Name must be at least 2 characters'),
  height: z.number().optional(),
  weight: z.number().optional(),
  birthdate: z.string().optional(),
  gender: z.enum(['male', 'female', 'other', '']).optional(),
  fitnessGoals: z.array(z.string()).optional(),
  experienceLevel: z.enum(['beginner', 'intermediate', 'advanced']).optional(),
});

type ProfileFormData = z.infer<typeof profileSchema>;

const Profile = () => {
  const { userProfile, updateUserProfile, isLoading } = useProfileProvider();
  const [successMessage, setSuccessMessage] = useState('');
  
  // Alapértelmezett értékek a formhoz
  const defaultFormData: ProfileFormData = {
    displayName: '',
    height: undefined,
    weight: undefined,
    birthdate: '',
    gender: '',
    fitnessGoals: [],
    experienceLevel: undefined
  };
  
  // Egyszerű állapottárolás a form adatainak
  const [formData, setFormData] = useState<ProfileFormData>(defaultFormData);
  
  // Frissítsük a form adatokat, amikor a profil betöltődik
  useEffect(() => {
    if (userProfile) {
      // Debug a profil adatait
      console.log('UserProfile received:', userProfile);
      
      // Reset függvénnyel frissítjük a form értékeit
      reset({
        displayName: userProfile.displayName || '',
        height: userProfile.height,
        weight: userProfile.weight,
        birthdate: userProfile.birthdate || '',
        gender: userProfile.gender as 'male' | 'female' | 'other' | undefined,
        fitnessGoals: userProfile.fitnessGoals || [],
        experienceLevel: userProfile.experienceLevel,
      });
      
      console.log('Form reset with profile data');
    } else {
      console.log('UserProfile is null or undefined - using default values');
    }
  }, [userProfile, reset]);

  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<ProfileFormData>({
    resolver: zodResolver(profileSchema),
    defaultValues: {
      displayName: '',
      height: undefined,
      weight: undefined,
      birthdate: '',
      gender: undefined,
      fitnessGoals: [],
      experienceLevel: undefined,
    },
    // Ez biztosítja, hogy a mezők szerkeszthetőek legyenek
    mode: 'onSubmit',
  });
  
  // Ezt az effect-et eltávolítjuk, mert a másik useEffect-ben fogjuk beállítani az értékeket

  const [errorMessage, setErrorMessage] = useState('');
  
  const onSubmit = async (data: ProfileFormData) => {
    // Clear any previous messages
    setSuccessMessage('');
    setErrorMessage('');
    
    console.log('Submitting form data:', data);
    
    try {
      const updatedProfile = await updateUserProfile(data);
      
      if (updatedProfile) {
        // Sikeres mentés után frissítsük a form adatait
        setFormData({
          displayName: data.displayName || '',
          height: data.height,
          weight: data.weight,
          birthdate: data.birthdate || '',
          gender: data.gender as 'male' | 'female' | 'other' | undefined,
          fitnessGoals: data.fitnessGoals || [],
          experienceLevel: data.experienceLevel,
        });
      }
      
      setSuccessMessage('Profile updated successfully');
      
      // Clear success message after 3 seconds
      setTimeout(() => setSuccessMessage(''), 3000);
    } catch (error) {
      console.error('Failed to update profile:', error);
      
      // Set appropriate error message
      if (error instanceof Error) {
        if (error.message.includes('column') && error.message.includes('does not exist')) {
          setErrorMessage('The system is missing some profile fields. Please contact support.');
        } else {
          setErrorMessage(error.message || 'Failed to update profile');
        }
      } else {
        setErrorMessage('An unexpected error occurred');
      }
      
      // Clear error after 5 seconds
      setTimeout(() => setErrorMessage(''), 5000);
    }
  };

  return (
    <div className="mx-auto max-w-3xl space-y-6 p-4">
      <div className="text-center">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Profile Settings</h1>
        <p className="mt-2 text-gray-600 dark:text-gray-400">
          Update your personal information and preferences
        </p>
      </div>

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        <div className="rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800">
          <h2 className="mb-4 text-xl font-semibold text-gray-900 dark:text-white">
            Personal Information
          </h2>

          <div className="space-y-4">
            <div>
              <label htmlFor="displayName" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Full Name
              </label>
              <div className="relative mt-1">
                <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                  <User className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  type="text"
                  id="displayName"
                  {...register('displayName')}
                  className="input pl-10"
                  placeholder="Your full name"
                />
              </div>
              {errors.displayName && (
                <p className="mt-1 text-sm text-error-600 dark:text-error-400">{errors.displayName.message}</p>
              )}
            </div>

            <div>
              <label htmlFor="birthdate" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Birth Date
              </label>
              <div className="relative mt-1">
                <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                  <Calendar className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  type="date"
                  id="birthdate"
                  {...register('birthdate')}
                  className="input pl-10"
                />
              </div>
            </div>

            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <div>
                <label htmlFor="height" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Height (cm)
                </label>
                <div className="relative mt-1">
                  <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                    <Ruler className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    type="number"
                    id="height"
                    {...register('height', { 
                      valueAsNumber: true,
                      setValueAs: value => value === '' ? undefined : parseFloat(value)
                    })}
                    className="input pl-10"
                    placeholder="Height in cm"
                  />
                </div>
              </div>

              <div>
                <label htmlFor="weight" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Weight (kg)
                </label>
                <div className="relative mt-1">
                  <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                    <Scale className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    type="number"
                    id="weight"
                    {...register('weight', { 
                      valueAsNumber: true,
                      setValueAs: value => value === '' ? undefined : parseFloat(value)
                    })}
                    className="input pl-10"
                    placeholder="Weight in kg"
                  />
                </div>
              </div>
            </div>

            <div>
              <label htmlFor="gender" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Gender
              </label>
              <select
                id="gender"
                {...register('gender')}
                className="input mt-1"
              >
                <option value="">Prefer not to say</option>
                <option value="male">Male</option>
                <option value="female">Female</option>
                <option value="other">Other</option>
              </select>
            </div>
          </div>
        </div>

        <div className="my-6 border-t border-gray-200 dark:border-gray-700"></div>

        <div className="rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800">
          <h2 className="mb-4 text-xl font-semibold text-gray-900 dark:text-white">
            Fitness Profile
          </h2>

          <div className="space-y-4">
            <div>
              <label htmlFor="experienceLevel" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Experience Level
              </label>
              <select
                id="experienceLevel"
                {...register('experienceLevel')}
                className="input mt-1"
              >
                <option value="">Select your experience level</option>
                <option value="beginner">Beginner</option>
                <option value="intermediate">Intermediate</option>
                <option value="advanced">Advanced</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Fitness Goals
              </label>
              <div className="mt-2 space-y-2">
                {['Weight Loss', 'Muscle Gain', 'Strength', 'Endurance', 'Flexibility'].map((goal) => (
                  <label key={goal} className="flex items-center">
                    <input
                      type="checkbox"
                      value={goal}
                      {...register('fitnessGoals')}
                      className="h-4 w-4 rounded border-gray-300 text-primary-600 focus:ring-primary-500 dark:border-gray-600"
                    />
                    <span className="ml-2 text-gray-700 dark:text-gray-300">{goal}</span>
                  </label>
                ))}
              </div>
            </div>
          </div>
        </div>

        {successMessage && (
          <div className="rounded-md bg-success-50 p-4 dark:bg-success-900/30">
            <div className="flex">
              <div className="flex-shrink-0">
                <Target className="h-5 w-5 text-success-400 dark:text-success-500" aria-hidden="true" />
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium text-success-800 dark:text-success-200">
                  {successMessage}
                </p>
              </div>
            </div>
          </div>
        )}

        {errorMessage && (
          <div className="rounded-md bg-error-50 p-4 dark:bg-error-900/30">
            <div className="flex">
              <div className="flex-shrink-0">
                <X className="h-5 w-5 text-error-400 dark:text-error-500" aria-hidden="true" />
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium text-error-800 dark:text-error-200">
                  {errorMessage}
                </p>
              </div>
            </div>
          </div>
        )}

        <div className="flex justify-end gap-3">
          {isLoading && (
            <div className="flex items-center text-sm text-gray-500 dark:text-gray-400">
              <div className="h-4 w-4 animate-spin rounded-full border-2 border-gray-500 border-t-transparent dark:border-gray-400"></div>
              <span className="ml-2">Processing...</span>
            </div>
          )}
          <button
            type="submit"
            disabled={isLoading}
            className="btn btn-primary"
          >
            {isLoading ? (
              <div className="flex items-center">
                <div className="h-5 w-5 animate-spin rounded-full border-2 border-white border-t-transparent"></div>
                <span className="ml-2">Saving...</span>
              </div>
            ) : (
              'Save Changes'
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default Profile;
-- üîß MEGH√çV√ì RENDSZER - ADATB√ÅZIS STRUKT√öRA
-- M√°solj be ezt a Supabase Dashboard > SQL Editor-be

-- ==========================================
-- PENDING INVITES T√ÅBLA
-- ==========================================

-- Megh√≠v√≥ t√°bl√°zat l√©trehoz√°sa
CREATE TABLE IF NOT EXISTS public.pending_invites (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    email TEXT NOT NULL,
    role user_role NOT NULL DEFAULT 'user',
    invited_by UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
    invite_token UUID NOT NULL UNIQUE DEFAULT gen_random_uuid(),
    expires_at TIMESTAMPTZ NOT NULL DEFAULT (NOW() + INTERVAL '7 days'),
    used_at TIMESTAMPTZ NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Index-ek a jobb teljes√≠tm√©ny√©rt
CREATE INDEX IF NOT EXISTS idx_pending_invites_email ON public.pending_invites(email);
CREATE INDEX IF NOT EXISTS idx_pending_invites_token ON public.pending_invites(invite_token);
CREATE INDEX IF NOT EXISTS idx_pending_invites_expires ON public.pending_invites(expires_at);

-- ==========================================
-- RLS POLICIES
-- ==========================================

-- RLS enged√©lyez√©se
ALTER TABLE public.pending_invites ENABLE ROW LEVEL SECURITY;

-- Admin policy - adminok mindent l√°thatnak √©s kezelhetnek
CREATE POLICY "Admins can manage all invites" ON public.pending_invites
FOR ALL USING (
    EXISTS (
        SELECT 1 FROM public.profiles 
        WHERE id = auth.uid() AND role = 'admin'
    )
);

-- Saj√°t megh√≠v√≥k megtekint√©se policy
CREATE POLICY "Users can view their own invites" ON public.pending_invites
FOR SELECT USING (invited_by = auth.uid());

-- Public select policy a token valid√°l√°shoz (invite oldalakon)
CREATE POLICY "Public can validate invite tokens" ON public.pending_invites
FOR SELECT USING (
    invite_token IS NOT NULL 
    AND expires_at > NOW() 
    AND used_at IS NULL
);

-- ==========================================
-- MEGH√çV√ì FUNKCI√ìK
-- ==========================================

-- Megh√≠v√≥ l√©trehoz√°si funkci√≥
CREATE OR REPLACE FUNCTION create_user_invite(
    invite_email TEXT,
    invite_role user_role DEFAULT 'user'
)
RETURNS SETOF public.pending_invites
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    new_invite public.pending_invites;
BEGIN
    -- Admin jogosults√°g ellen≈ërz√©se
    IF NOT EXISTS (
        SELECT 1 FROM public.profiles 
        WHERE id = auth.uid() AND role = 'admin'
    ) THEN
        RAISE EXCEPTION 'Unauthorized: Only admins can create invites';
    END IF;
    
    -- Ellen≈ërizz√ºk, hogy m√°r l√©tezik-e felhaszn√°l√≥ ezzel az email c√≠mmel
    IF EXISTS (
        SELECT 1 FROM public.profiles 
        WHERE email = invite_email
    ) THEN
        RAISE EXCEPTION 'User with email % already exists', invite_email;
    END IF;
    
    -- Ellen≈ërizz√ºk, hogy van-e akt√≠v megh√≠v√≥
    IF EXISTS (
        SELECT 1 FROM public.pending_invites 
        WHERE email = invite_email 
        AND expires_at > NOW() 
        AND used_at IS NULL
    ) THEN
        RAISE EXCEPTION 'Active invite already exists for email %', invite_email;
    END IF;
    
    -- √öj megh√≠v√≥ l√©trehoz√°sa
    INSERT INTO public.pending_invites (
        email,
        role,
        invited_by,
        invite_token,
        expires_at
    ) VALUES (
        invite_email,
        invite_role,
        auth.uid(),
        gen_random_uuid(),
        NOW() + INTERVAL '7 days'
    ) RETURNING * INTO new_invite;
    
    RAISE NOTICE 'Invite created for % with token %', invite_email, new_invite.invite_token;
    RETURN NEXT new_invite;
END $$;

-- Megh√≠v√≥ √©rv√©nyes√≠t√©si funkci√≥
CREATE OR REPLACE FUNCTION validate_invite_token(token UUID)
RETURNS SETOF public.pending_invites
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
    RETURN QUERY
    SELECT * FROM public.pending_invites
    WHERE invite_token = token
    AND expires_at > NOW()
    AND used_at IS NULL;
END $$;

-- Megh√≠v√≥ felhaszn√°l√°si funkci√≥
CREATE OR REPLACE FUNCTION use_invite_token(
    token UUID,
    new_user_id UUID
)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    invite_record public.pending_invites;
BEGIN
    -- Megh√≠v√≥ keres√©se √©s valid√°l√°sa
    SELECT * INTO invite_record
    FROM public.pending_invites
    WHERE invite_token = token
    AND expires_at > NOW()
    AND used_at IS NULL;
    
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Invalid or expired invite token';
    END IF;
    
    -- Profil l√©trehoz√°sa/friss√≠t√©se az √∫j felhaszn√°l√≥hoz
    INSERT INTO public.profiles (
        id,
        email,
        role,
        display_name,
        full_name,
        created_at,
        updated_at
    ) VALUES (
        new_user_id,
        invite_record.email,
        invite_record.role,
        split_part(invite_record.email, '@', 1),
        split_part(invite_record.email, '@', 1),
        NOW(),
        NOW()
    ) ON CONFLICT (id) DO UPDATE SET
        email = EXCLUDED.email,
        role = EXCLUDED.role,
        updated_at = NOW();
    
    -- Megh√≠v√≥ felhaszn√°lva jel√∂l√©se
    UPDATE public.pending_invites
    SET 
        used_at = NOW(),
        updated_at = NOW()
    WHERE id = invite_record.id;
    
    RETURN TRUE;
END $$;

-- ==========================================
-- JOGOSULTS√ÅGOK
-- ==========================================

-- Funkci√≥k publikus el√©rhet≈ës√©ge
GRANT EXECUTE ON FUNCTION create_user_invite TO authenticated;
GRANT EXECUTE ON FUNCTION validate_invite_token TO anon, authenticated;
GRANT EXECUTE ON FUNCTION use_invite_token TO anon, authenticated;

-- ==========================================
-- CLEANUP FUNKCI√ì (LEJ√ÅRT MEGH√çV√ìK T√ñRL√âSE)
-- ==========================================

CREATE OR REPLACE FUNCTION cleanup_expired_invites()
RETURNS INTEGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM public.pending_invites
    WHERE expires_at < NOW() - INTERVAL '1 day';
    
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RAISE NOTICE 'Cleaned up % expired invites', deleted_count;
    
    RETURN deleted_count;
END $$;

-- ==========================================
-- VALID√ÅCI√ì
-- ==========================================

-- Ellen≈ërizz√ºk a t√°bla l√©trej√∂tt√©t
SELECT 
    'pending_invites table created' as status,
    COUNT(*) as invite_count
FROM public.pending_invites;

-- Ellen≈ërizz√ºk a funkci√≥kat
SELECT 
    'Functions created' as status,
    routine_name as function_name
FROM information_schema.routines 
WHERE routine_name IN ('create_user_invite', 'validate_invite_token', 'use_invite_token')
AND routine_schema = 'public'
ORDER BY routine_name;

SELECT '‚úÖ INVITE SYSTEM DATABASE SETUP COMPLETE!' as result;
